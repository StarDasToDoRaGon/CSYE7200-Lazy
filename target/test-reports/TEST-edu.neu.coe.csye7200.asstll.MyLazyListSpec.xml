<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="忍者的下午茶" name="edu.neu.coe.csye7200.asstll.MyLazyListSpec" tests="37" errors="0" failures="0" skipped="0" time="0.045" timestamp="2024-02-14T21:19:00">
                     <properties>
      <property name="java.specification.version" value="17"/><property name="sun.cpu.isalist" value="amd64"/><property name="sun.jnu.encoding" value="GBK"/><property name="sun.arch.data.model" value="64"/><property name="java.vendor.url" value="https://java.oracle.com/"/><property name="sun.boot.library.path" value="E:\JAVA17\bin"/><property name="sun.java.command" value="xsbt.boot.Boot testOnly MyLazyListSpec"/><property name="jdk.debug" value="release"/><property name="sun.stderr.encoding" value="ms936"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="java.version.date" value="2024-01-16"/><property name="java.home" value="E:\JAVA17"/><property name="file.separator" value="\"/><property name="java.vm.compressedOopsMode" value="32-bit"/><property name="line.separator" value="
"/><property name="sun.stdout.encoding" value="ms936"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="java.specification.name" value="Java Platform API Specification"/><property name="user.script" value=""/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="java.runtime.version" value="17.0.10+11-LTS-240"/><property name="user.name" value="zhixz"/><property name="log4j.ignoreTCL" value="true"/><property name="file.encoding" value="UTF-8"/><property name="jnidispatch.path" value="C:\Users\zhixz\AppData\Local\Temp\jna-115872573\jna16812944667107886544.dll"/><property name="jna.loaded" value="true"/><property name="java.io.tmpdir" value="C:\Users\zhixz\AppData\Local\Temp\"/><property name="java.version" value="17.0.10"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="sun.os.patch.level" value=""/><property name="native.encoding" value="GBK"/><property name="java.library.path" value="E:\JAVA17\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;E:\JAVA17\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Razer Chroma SDK\bin;C:\Program Files\Razer Chroma SDK\bin;C:\Program Files (x86)\Razer\ChromaBroadcast\bin;C:\Program Files\Razer\ChromaBroadcast\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files\dotnet\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Common Files\Tom Sawyer Software\10.0.0;C:\Users\zhixz\AppData\Local\Microsoft\WindowsApps;C:\Windows\system32\config\systemprofile\AppData\Local\Microsoft\WindowsApps;E:\Scala\bin;E:\Scala\bin;E:\Program Files\Notepad++;E:\Program Files\Git\cmd;E:\Python;E:\JAVA17\bin;E:\Python\Scripts\;E:\Python\;C:\Users\zhixz\AppData\Local\Microsoft\WindowsApps;C:\Users\zhixz\AppData\Local\Coursier\data\bin;E:\IntelliJ IDEA 2023.3.2\bin;;E:\Hadoop\bin;E:\spark-3.5.0-bin-hadoop3\spark-3.5.0-bin-hadoop3\bin;E:\JAVA17\bin;E:\JAVA17\jre\bin;;."/><property name="java.vendor" value="Oracle Corporation"/><property name="scala.ext.dirs" value="C:\Users\zhixz\.sbt\1.0\java9-rt-ext-oracle_corporation_17_0_10"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="java.class.path" value="C:\Users\zhixz\AppData\Local\Coursier\cache\arc\https\github.com\sbt\sbt\releases\download\v1.9.8\sbt-1.9.8.zip\sbt\bin\sbt-launch.jar"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="user.variant" value=""/><property name="jline.shutdownhook" value="false"/><property name="user.timezone" value="America/New_York"/><property name="java.vm.specification.version" value="17"/><property name="os.name" value="Windows 11"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="user.country" value="US"/><property name="sun.cpu.endian" value="little"/><property name="user.home" value="C:\Users\zhixz"/><property name="user.language" value="en"/><property name="swoval.tmpdir" value="C:\Users\zhixz\.sbt\1.0"/><property name="jline.esc.timeout" value="0"/><property name="path.separator" value=";"/><property name="os.version" value="10.0"/><property name="jna.nosys" value="true"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/><property name="user.dir" value="E:\CSYE7200\assignment-lazy"/><property name="os.arch" value="amd64"/><property name="java.vm.info" value="mixed mode, sharing"/><property name="java.vm.version" value="17.0.10+11-LTS-240"/><property name="java.class.version" value="61.0"/>
    </properties>
                     <testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="Cons should produce a single of 1" time="0.02">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="Cons should produce a stream of xs using Cons directly" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="toSeq should produce a single 1" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="toSeq should produce a sequence of 1, 2" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="ones should produce a stream of 1s" time="0.002">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="take should take zero from a finite stream" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="take should take zero from an infinite stream" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="take should take 3 from a finite stream of actual length 1" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="take should take 3 from an infinite stream" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="take should take 3 from an infinite stream of 1s that counts" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="take should take 3 from an infinite incrementing stream that counts" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="drop should work correctly" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="++ should join two Empty streams together" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="++ should join a stream with an Empty stream" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="++ should join an Empty stream with a stream" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="map should produce a stream of 2s" time="0.004">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="flatMap should produce a stream of 2s from a single element 1" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="flatMap should produce a stream of 2s from a stream of 1s" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="from should get a Seq(2, 4, 6, 8)" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="from should get a Seq(1, -1, -3, -5)" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="filter should produce a stream of even numbers using from(1)" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="filter should produce a stream of even numbers using from(2,2)" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="filterNot should produce a stream of even numbers using from(1)" time="0.002">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="filterNot should produce a stream of even numbers using from(2,2)" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="zip should zip together two empty streams" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="zip should zip together a stream and an empty stream" time="0.002">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="zip should zip together an empty stream and a stream" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="zip should zip together two non-empty streams" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="apply should produce a stream of a single 1" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="continually should produce a stream of 1s" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="continually should produce a stream of 1 thru 3" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="MyLazyList as a monad should support a for-comprehension" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="MyLazyList as a monad should support a for-comprehension with filter" time="0.001">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="singleton should allow for 1" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="Iterator should support EmptyList" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="Iterator should support from" time="0.0">
                                                 
                                               </testcase><testcase classname="edu.neu.coe.csye7200.asstll.MyLazyListSpec" name="Iterator should support singleton" time="0.001">
                                                 
                                               </testcase>
                     <system-out><![CDATA[]]></system-out>
                     <system-err><![CDATA[]]></system-err>
                   </testsuite>